"""Initial Revision

Revision ID: 1f136811cab5
Revises:
Create Date: 2020-07-17 12:19:50.591461

"""
import sqlalchemy as sa

from alembic import op

# revision identifiers, used by Alembic.
revision = "1f136811cab5"
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # Replaced auto generated migration with plain SQL statements
    # to only create the tables if they don't exist yet.
    # Can be reverted once the prod database has been migrated.

    # ### commands auto generated by Alembic - please adjust! ###
    #
    # op.create_table(
    #     "data_access_policies",
    #     sa.Column("id", sa.Integer(), nullable=False),
    #     sa.Column("access_kind", sa.String(length=20), nullable=True),
    #     sa.Column("owner_rid", sa.String(length=100), nullable=False),
    #     sa.Column("tool", sa.String(length=20), nullable=True),
    #     sa.Column("user_rid", sa.String(length=100), nullable=True),
    #     sa.Column("validity_period_end_date", sa.Date(), nullable=True),
    #     sa.Column("validity_period_start_date", sa.Date(), nullable=True),
    #     sa.PrimaryKeyConstraint("id"),
    # )
    #
    # op.create_table(
    #     "data_accesses",
    #     sa.Column("id", sa.Integer(), nullable=False),
    #     sa.Column("access_kind", sa.String(length=20), nullable=False),
    #     sa.Column("justification", sa.Text(), nullable=True),
    #     sa.Column("timestamp", sa.DateTime(), nullable=False),
    #     sa.Column("tool", sa.String(length=20), nullable=False),
    #     sa.Column("user_rid", sa.String(length=100), nullable=False),
    #     sa.PrimaryKeyConstraint("id"),
    # )
    #
    # op.create_table(
    #     "data_owners",
    #     sa.Column("data_access_id", sa.Integer(), nullable=False),
    #     sa.Column("owner_rid", sa.String(length=100), nullable=False),
    #     sa.ForeignKeyConstraint(["data_access_id"], ["data_accesses.id"],),
    #     sa.PrimaryKeyConstraint("data_access_id", "owner_rid"),
    # )
    #
    # op.create_table(
    #     "data_types",
    #     sa.Column("data_access_id", sa.Integer(), nullable=False),
    #     sa.Column("type", sa.String(length=100), nullable=False),
    #     sa.ForeignKeyConstraint(["data_access_id"], ["data_accesses.id"],),
    #     sa.PrimaryKeyConstraint("data_access_id", "type"),
    # )
    # ### end Alembic commands ###

    op.execute(
        """
        CREATE TABLE IF NOT EXISTS data_access_policies (
            id INTEGER NOT NULL,
            access_kind VARCHAR(20),
            owner_rid VARCHAR(100) NOT NULL,
            tool VARCHAR(20),
            user_rid VARCHAR(100),
            validity_period_end_date DATE,
            validity_period_start_date DATE,
            PRIMARY KEY (id)
        )
        """
    )

    op.execute(
        """
        CREATE TABLE IF NOT EXISTS data_accesses (
            id INTEGER NOT NULL,
            access_kind VARCHAR(20) NOT NULL,
            justification TEXT,
            timestamp DATETIME NOT NULL,
            tool VARCHAR(20) NOT NULL,
            user_rid VARCHAR(100) NOT NULL,
            PRIMARY KEY (id)
        )
        """
    )
    op.execute(
        """
        CREATE TABLE IF NOT EXISTS data_owners (
            data_access_id INTEGER NOT NULL,
            owner_rid VARCHAR(100) NOT NULL,
            PRIMARY KEY (data_access_id, owner_rid),
            FOREIGN KEY(data_access_id) REFERENCES data_accesses (id)
        )
        """
    )
    op.execute(
        """
        CREATE TABLE IF NOT EXISTS data_types (
            data_access_id INTEGER NOT NULL,
            type VARCHAR(100) NOT NULL,
            PRIMARY KEY (data_access_id, type),
            FOREIGN KEY(data_access_id) REFERENCES data_accesses (id)
        )
        """
    )


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("data_types")
    op.drop_table("data_owners")
    op.drop_table("data_accesses")
    op.drop_table("data_access_policies")
    # ### end Alembic commands ###
